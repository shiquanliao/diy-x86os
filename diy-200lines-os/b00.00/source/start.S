/**
 * 功能：16位与32位的启动混合代码
 *
 *创建时间：2022年8月31日
 *作者：李述铜
 *联系邮箱: 527676163@qq.com
 *相关信息：此工程为《从0写x86 Linux操作系统》的前置课程，用于帮助预先建立对32位x86体系结构的理解。整体代码量不到200行（不算注释）
 *课程请见：https://study.163.com/course/introduction.htm?courseId=1212765805&_trace_c_p_k2_=0bdf1e7edda543a8b9a0ad73b5100990
 */
	#include "os.h"

	// 声明本地以下符号是全局的，在其它源文件中可以访问
	.global _start

	// 指定以下的代码生成16位的机器指令，这样才能在启动时的实模式下运行
  	.code16

	// 以下是代码区
 	.text
_start: 
	// 初始化段寄存器
	// 设置cs寄存器的值为0，这样就可以访问0x0000:0x7c00处的内存了
	mov $0, %ax			// 把0赋值给ax寄存器
	mov %ax, %ds		// 把ax寄存器的值赋值给ds寄存器
	mov %ax, %es		// 把ax寄存器的值赋值给es寄存器
	mov %ax, %ss		// 把ax寄存器的值赋值给ss寄存器
	mov %ax, %gs		// 把ax寄存器的值赋值给gs寄存器, gs(全局段寄存器)是80286引入的，用于指向全局数据段
	mov %ax, %fs		// 把ax寄存器的值赋值给fs寄存器, fs(附加段寄存器)是80386引入的，用于指向附加数据段
	mov $_start, %sp	// 把_start符号的地址赋值给sp寄存器，这样就把栈指针初始化为_start符号的地址了

_read_self_all:
	// 读取自身的全部内容到内存中
	mov $0x02, %ah		// 设置ah寄存器的值为0x02，这是读磁盘的功能号
	mov $0x40, %al		// 设置al寄存器的值为0x40，这是读磁盘的扇区数
	mov $_start_32, %bx	// 设置bx寄存器的值为_start_32符号的地址，这是读磁盘的目标地址
	mov $0x02, %cx		// 设置cx寄存器的值为0x02，这是读磁盘的扇区号
	mov $0x80, %dx		// 设置dx寄存器的值为0x80，这是读磁盘的驱动器号
	int $0x13			// 调用0x13中断，读磁盘
	jc _read_self_all	// 如果读磁盘失败，就一直重试


	jmp .
    .org 0x1fe			// 0x1fe是主引导记录的最后2个字节
	.byte 0x55, 0xaa	// 主引导记录的最后2个字节必须是0x55和0xaa

	
_start_32:
	.fill 64*1024, 1, 0x35	// 用0x35填充64KB，这样就把代码区填充满了

